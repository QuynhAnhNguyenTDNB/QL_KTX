/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.QL_KTX;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author quynhanhnguyen
 */
public class SinhVienFrame extends javax.swing.JFrame {

    private int currentId;
    /**
     * Creates new form NewJFrame
     */
    public SinhVienFrame() {
        this.setTitle("Quản lý Sinh Viên");
        initComponents();
        // Load dữ liệu cho bản khi lần đầu vào
        loadTableData();
        // Thực hiện lắng nghe sự kiện
        setupTableListenersSV();
        loadRoomsIntoComboBox();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField5 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Lưu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jTextField3.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mã Sinh Viên", "Số CMT", "Ngày sinh", "Lớp", "Quê Quán", "Sửa", "Xóa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Mã Sinh viên");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Ngày sinh");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Số CMT");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Lớp");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Quê Quán");

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Tạo mới");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Số Phòng");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Ngày chuyển đến");

        jTextField4.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField2)
                                .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField1))
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(361, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        private boolean isValidDate(String dateStr) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false); // Đặt chế độ nghiêm ngặt
            try {
                sdf.parse(dateStr);
                return true;
            } catch (ParseException e) {
                return false;
            }
        }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Lấy dữ liệu từ các JTextField
        String MaSV = jTextField1.getText();
        String SoCMT = jTextField2.getText();
        String NgaySinh = jTextField3.getText();
        String Lop = jTextField4.getText();
//        String Lop;
//        if (jComboBox1.getSelectedItem() != null) {
//            Lop = jComboBox1.getSelectedItem().toString();
//        } else {
//            Lop = "";
//        }
        String SoPhong;
        if (jComboBox2.getSelectedItem() != null) {
            SoPhong = jComboBox2.getSelectedItem().toString();
        } else {
            SoPhong = "";
        }
        String QueQuan = jTextField5.getText();
        String NgayVaoO = jTextField6.getText();
        boolean validateNgaySinh = isValidDate(NgaySinh);
        boolean validateNgayVaoO = isValidDate(NgayVaoO);
        String sql;
        System.out.println(NgaySinh);
        System.out.println(validateNgaySinh);
        if (MaSV.isEmpty() || SoCMT.isEmpty() || NgaySinh.isEmpty() || Lop.isEmpty() || SoPhong.isEmpty() || QueQuan.isEmpty() || NgayVaoO.isEmpty()){
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }else if (validateNgaySinh != true){
            JOptionPane.showMessageDialog(this, "Ngày sinh không hợp lệ. Vui lòng nhập theo định dạng yyyy-MM-dd", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }else if (validateNgayVaoO != true){
            JOptionPane.showMessageDialog(this, "Ngày chuyển đến không hợp lệ. Vui lòng nhập theo định dạng yyyy-MM-dd", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        if(this.currentId != 0){
            // Câu lệnh UPDATE
            sql = "UPDATE SinhVien SET maSv ='" + MaSV + "', SoCMT ='" + SoCMT + "',  NgaySinh ='" + NgaySinh + "', Lop ='" + Lop + "', QueQuan ='" + QueQuan + "', SoPhong ='" + SoPhong + "', NgayVaoO ='" + NgayVaoO + "' WHERE MaSV = " + this.currentId;
        } else {
            // Câu lệnh INSERT
            sql = "INSERT INTO SinhVien (MaSV, SoCMT, NgaySinh, Lop, QueQuan, SoPhong, NgayVaoO) VALUES ('" + MaSV + "', '" + SoCMT + "', '" + NgaySinh + "', '" + Lop + "', '" + QueQuan + "', '" + SoPhong + "', '" + NgayVaoO + "')";
        }
        try {
            int rowsAffected = MySqlConnect.executeUpdate(sql);
            if (rowsAffected > 0) {
                jButton1.setText("Lưu");
                if (this.currentId == 0 & validateNgaySinh == true & validateNgayVaoO == true){
                JOptionPane.showMessageDialog(null, "Thêm mới thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }else if(this.currentId != 0 & validateNgaySinh == true & validateNgayVaoO == true){
                JOptionPane.showMessageDialog(null, "Sửa thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);                    
                }
                this.currentId = 0;                
            }

            // Sau khi lưu, hiển thị dữ liệu trong JTable
            loadTableData();
        }catch (SQLException ex) {
            System.err.println(ex.getErrorCode());
            // Kiểm tra mã lỗi
            if (ex.getErrorCode() == 1644) {
                JOptionPane.showMessageDialog(null,ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else {
                System.out.println(ex.getErrorCode());
                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Thêm mới không thành công!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (Exception ex) {
            System.out.println("Có lỗi xảy ra. Thêm mới không thành công!");
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Thêm mới không thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            jTextField1.setText(""); // Mã SV
            jTextField2.setText(""); // Số CMT
            jTextField3.setText(""); // Ngày Sinh
            jTextField4.setText(""); // Lớp
            jTextField5.setText(""); //Quê quán
            jComboBox2.setSelectedItem(null);// Phòng
            jTextField6.setText(""); // Ngày Vào Ở
            jButton1.setText("Lưu");
            this.currentId = 0;
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
//        String sqlcombobox2 = "SELECT p.SoPhong FROM Phong p";
//        try {
//            ResultSet combobox2 = MySqlConnect.executeSQL(sqlcombobox2);
//                
//                jComboBox2.removeAllItems();
//                
//                String soPhong = combobox2.getString("SoPhong");
//                jComboBox2.addItem(soPhong);
//
//        } catch (SQLException ex) {
//            System.out.println("Failed to retrieve data from the database.");
//        }
        
    }//GEN-LAST:event_jComboBox2ActionPerformed
 
    private void loadTableData() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Không cho phép chỉnh sửa bất kỳ ô nào
                return false;
            }
        };
        model.addColumn("Mã SV");
        model.addColumn("Số CMT");
        model.addColumn("Ngày Sinh");
        model.addColumn("Lớp");
        model.addColumn("Số Phòng");
        model.addColumn("Quê Quán");
        model.addColumn("Ngày Chuyển Đến");
        model.addColumn("Sửa");
        model.addColumn("Xóa");

        // Thêm dữ liệu vào mô hình bảng
        String sqlSelect = "SELECT sv.MaSV, sv.SoCMT, sv.NgaySinh, sv.Lop, sv.QueQuan , sv.NgayVaoO, p.SoPhong, p.LoaiPhong, p.DonGia, p.SoNguoiToiDa, p.SoNguoiHienTai FROM SinhVien sv JOIN Phong p ON sv.SoPhong = p.SoPhong";
        try {
            ResultSet rs = MySqlConnect.executeSQL(sqlSelect);

            while (rs != null && rs.next()) {
                SinhVien sv = new SinhVien(
                        rs.getString("MaSV"),
                        rs.getString("SoCMT"),
                        rs.getString("NgaySinh"),
                        rs.getString("Lop"),
                        rs.getString("QueQuan"),
                        rs.getString("SoPhong"),
                        rs.getString("NgayVaoO")
                );
                Phong p = new Phong(
                        rs.getString("SoPhong"),
                        rs.getString("LoaiPhong"),
                        rs.getString("DonGia"),
                        rs.getInt("SoNguoiToiDa"),
                        rs.getInt("SoNguoiHienTai")
                );

                // Thêm hàng vào DefaultTableModel
                model.addRow(new Object[]{
                    sv.getMaSv(),
                    sv.getSoCmt(),
                    sv.getNgaySinh(),
                    sv.getLop(),
                    p.getSoPhong(),
                    sv.getQueQuan(),
                    sv.getNgayVaoO(),
                    "Sửa",
                    "Xóa"
                });
            }

            // Thiết lập model cho JTable
            jTable1.setModel(model);

            rs.close();
        } catch (SQLException ex) {
            System.out.println("Failed to retrieve data from the database.");
        }
    }
    
    private void setupTableListenersSV() {
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = jTable1.rowAtPoint(e.getPoint());
                int column = jTable1.columnAtPoint(e.getPoint());

                // Kiểm tra nếu nhấp vào một hàng
                if (row >= 0) {
                    // Kiểm tra nếu click vào cột "Sửa"
                    if (column == jTable1.getColumn("Sửa").getModelIndex()) {
                        // Cập nhật dữ liệu lên form
                        updateFormFromSelectedRow(row);
                    }
                    // Kiểm tra nếu click vào cột "Xóa"
                    else if (column == jTable1.getColumn("Xóa").getModelIndex()) {
                        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa dòng này?", "Xóa", JOptionPane.YES_NO_OPTION);
                        if (confirm == JOptionPane.YES_OPTION) {
                            int id = Integer.parseInt((String) jTable1.getValueAt(row, 0));
                            deleteRow(id);
                        }
                    }
                }
            }
        });
    }
    private void loadRoomsIntoComboBox(){
        String sqlcombobox2 = "SELECT SoPhong FROM Phong";
        try {
            ResultSet Combobox2 = MySqlConnect.executeSQL(sqlcombobox2);
            while (Combobox2 != null & Combobox2.next()) {
                jComboBox2.addItem(Combobox2.getString("SoPhong"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách phòng: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    }


    
    private void updateFormFromSelectedRow(int row) {
        if (row >= 0) {
            jTextField1.setText(jTable1.getValueAt(row, 0).toString()); // Mã SV
            jTextField2.setText(jTable1.getValueAt(row, 1).toString()); // Số CMT
            jTextField3.setText(jTable1.getValueAt(row, 2).toString()); // Ngày Sinh
            jTextField4.setText(jTable1.getValueAt(row, 3).toString()); // Lớp
            jComboBox2.setSelectedItem(jTable1.getValueAt(row, 4).toString()); // Phòng
            jTextField5.setText(jTable1.getValueAt(row, 5).toString()); // Quê Quán
            jTextField6.setText(jTable1.getValueAt(row, 6).toString()); // Ngày chuyển đến
            jButton1.setText("Sửa");
            this.currentId = Integer.parseInt(jTextField1.getText());
        }
    }
    
    private void deleteRow(int id) {
        String sqlDelete = "DELETE FROM SinhVien WHERE MaSV = ?";
        int rowsAffected = MySqlConnect.executeDelete(sqlDelete, id);
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Xóa thành công", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Xóa không thành công", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        loadTableData();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
