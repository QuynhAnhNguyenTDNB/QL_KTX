/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.QL_KTX;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class SuDungDichVuFrame extends javax.swing.JFrame {
    private int currentId;

    /**
     * Creates new form SuDungDichVu
     */
    public SuDungDichVuFrame() {
        this.setTitle("Quản lý đăng ký sử dụng dịch vụ tháng");
        initComponents();
        loadMaSvIntoComboBox();
        loadMaDvIntoComboBox();
        loadTableData();
        setupTableListeners();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Mã Sinh Viên");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Mã Dịch Vụ");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Ngày sử dụng");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Lưu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mã Sinh Viên", "Số CMT", "Ngày sinh", "Lớp", "Quê Quán", "Sửa", "Xóa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Tạo mới");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Số lần sử dụng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        //        String sqlcombobox2 = "SELECT p.SoPhong FROM Phong p";
        //        try {
            //            ResultSet combobox2 = MySqlConnect.executeSQL(sqlcombobox2);
            //
            //                jComboBox2.removeAllItems();
            //
            //                String soPhong = combobox2.getString("SoPhong");
            //                jComboBox2.addItem(soPhong);
            //
            //        } catch (SQLException ex) {
            //            System.out.println("Failed to retrieve data from the database.");
            //        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private boolean isValidDate(String dateStr) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false); // Đặt chế độ nghiêm ngặt
            try {
                sdf.parse(dateStr);
                return true;
            } catch (ParseException e) {
                return false;
            }
        }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Lấy dữ liệu từ các JTextField
        String MaSV;
        if (jComboBox1.getSelectedItem() != null) {
            MaSV = jComboBox1.getSelectedItem().toString();
        } else {
            MaSV = "";
        }
        String MaDV;
        if (jComboBox2.getSelectedItem() != null) {
            MaDV = jComboBox2.getSelectedItem().toString();
        } else {
            MaDV = "";
        }
        String NgaySuDung = jTextField1.getText();
        String SoLanSuDung = jTextField2.getText();
        boolean validateNgaySuDung = isValidDate(NgaySuDung);
        String sql;
        System.out.println(NgaySuDung);
        System.out.println(validateNgaySuDung);
        if (MaSV.isEmpty() || MaDV.isEmpty() || NgaySuDung.isEmpty()){
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }else if (validateNgaySuDung != true){
            JOptionPane.showMessageDialog(this, "Ngày sinh không hợp lệ. Vui lòng nhập theo định dạng yyyy-MM-dd", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        if(this.currentId != 0){
            // Câu lệnh UPDATE
            sql = "UPDATE SuDungDichVu SET MaSV ='" + MaSV + "', MaDV ='" + MaDV + "',  NgaySuDung ='" + NgaySuDung + "',  SoLanSuDung ='" + SoLanSuDung + "' WHERE Id = " + this.currentId;
        } else {
            // Câu lệnh INSERT
            sql = "INSERT INTO SuDungDichVu (MaSV, MaDV, NgaySuDung,SoLanSuDung) VALUES ('" + MaSV + "', '" + MaDV + "', '" + NgaySuDung + "', '" + SoLanSuDung + "')";
        }
        try {
            int rowsAffected = MySqlConnect.executeUpdate(sql);
            if (rowsAffected > 0) {
                jButton1.setText("Lưu");
                if (this.currentId == 0 & validateNgaySuDung == true){
                    JOptionPane.showMessageDialog(null, "Thêm mới thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }else if(this.currentId != 0 & validateNgaySuDung == true){
                    JOptionPane.showMessageDialog(null, "Sửa thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
                this.currentId = 0;
            }

            // Sau khi lưu, hiển thị dữ liệu trong JTable
            loadTableData();
        } catch (Exception ex) {
            System.out.println("Có lỗi xảy ra. Thêm mới không thành công!");
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Thêm mới không thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jComboBox1.setSelectedItem(null);// Mã SV
        jComboBox2.setSelectedItem(null);// Mã DV
        jTextField1.setText(""); // Ngày Sử Dụng
        jButton1.setText("Lưu");
        this.currentId = 0;

    }//GEN-LAST:event_jButton2ActionPerformed

    private void loadTableData() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Không cho phép chỉnh sửa bất kỳ ô nào
                return false;
            }
        };
        model.addColumn("Id");
        model.addColumn("Mã sinh viên");
        model.addColumn("Mã dịch vụ");
        model.addColumn("Ngày sử dụng");
        model.addColumn("Số lần sử dụng");
        model.addColumn("Thành tiền");
        model.addColumn("Sửa");
        model.addColumn("Xóa");

        // Thêm dữ liệu vào mô hình bảng
        String sqlSelect = "SELECT sddv.Id,sddv.MaSV,sddv.MaDV,sddv.NgaySuDung,sddv.SoLanSuDung,(dv.DonGia * sddv.SoLanSuDung) AS TongTien FROM SuDungDichVu sddv JOIN dichvu dv ON sddv.MaDV = dv.MaDV";
        try {
            ResultSet rs = MySqlConnect.executeSQL(sqlSelect);

            while (rs != null && rs.next()) {
                SuDungDichVu sddv = new SuDungDichVu(
                        rs.getString("Id"),
                        rs.getString("MaSV"),
                        rs.getString("MaDV"),
                        rs.getDate("NgaySuDung"),
                        rs.getInt("SoLanSuDung")
                );

                // Thêm hàng vào DefaultTableModel
                model.addRow(new Object[]{
                    sddv.getId(),
                    sddv.getMaSV(),
                    sddv.getMaDV(),
                    sddv.getNgaySuDung(),
                    sddv.getSoLanSuDung(),
                    rs.getString("TongTien"),
                    "Sửa",
                    "Xóa"
                });
            }

            // Thiết lập model cho JTable
            jTable1.setModel(model);

            rs.close();
        } catch (SQLException ex) {
            System.out.println("Failed to retrieve data from the database.");
        }
    }
    
    private void setupTableListeners() {
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = jTable1.rowAtPoint(e.getPoint());
                int column = jTable1.columnAtPoint(e.getPoint());

                // Kiểm tra nếu nhấp vào một hàng
                if (row >= 0) {
                    // Kiểm tra nếu click vào cột "Sửa"
                    if (column == jTable1.getColumn("Sửa").getModelIndex()) {
                        // Cập nhật dữ liệu lên form
                        updateFormFromSelectedRow(row);
                    }
                    // Kiểm tra nếu click vào cột "Xóa"
                    else if (column == jTable1.getColumn("Xóa").getModelIndex()) {
                        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa dòng này?", "Xóa", JOptionPane.YES_NO_OPTION);
                        if (confirm == JOptionPane.YES_OPTION) {
                            int id = Integer.parseInt((String) jTable1.getValueAt(row, 0));
                            deleteRow(id);
                        }
                    }
                }
            }
        });
    }
    private void loadMaSvIntoComboBox(){
        String sqlcombobox1 = "SELECT MaSV FROM SinhVien";
        try {
            ResultSet Combobox1 = MySqlConnect.executeSQL(sqlcombobox1);
            while (Combobox1 != null & Combobox1.next()) {
                jComboBox1.addItem(Combobox1.getString("MaSV"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách sinh vieen: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    }
    private void loadMaDvIntoComboBox(){
        String sqlcombobox2 = "SELECT MaDV FROM DichVu";
        try {
            ResultSet Combobox2 = MySqlConnect.executeSQL(sqlcombobox2);
            while (Combobox2 != null & Combobox2.next()) {
                jComboBox2.addItem(Combobox2.getString("MaDV"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách phòng: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    }


    
    private void updateFormFromSelectedRow(int row) {
        if (row >= 0) {
            jComboBox1.setSelectedItem(jTable1.getValueAt(row, 1).toString()); 
            jComboBox2.setSelectedItem(jTable1.getValueAt(row, 2).toString()); 
            jTextField1.setText(jTable1.getValueAt(row, 3).toString()); 
            jTextField2.setText(jTable1.getValueAt(row, 4).toString());
            jButton1.setText("Sửa");
            this.currentId = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
        }
    }
    
    private void deleteRow(int id) {
        String sqlDelete = "DELETE FROM SuDungDichVu WHERE Id = ?";
        int rowsAffected = MySqlConnect.executeDelete(sqlDelete, id);
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Xóa thành công", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Xóa không thành công", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        loadTableData();
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SuDungDichVuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SuDungDichVuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SuDungDichVuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SuDungDichVuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SuDungDichVuFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
