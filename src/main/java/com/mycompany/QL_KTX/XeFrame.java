/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.QL_KTX;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ADMIN
 */
public class XeFrame extends javax.swing.JFrame {
    String CurrentBienSo = "";

    /**
     * Creates new form LopFrame
     */
    public XeFrame() {
        this.setTitle("Quản lý Xe");
        initComponents();
        loadTableData();
        // Thực hiện lắng nghe sự kiện
        setupTableListenersSV();
        loadMaSVIntoComboBox();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Mã sinh viên");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Biển số xe");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Ngày gửi xe");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Tạo mới");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Lưu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mã Sinh Viên", "Số CMT", "Ngày sinh", "Lớp", "Quê Quán", "Sửa", "Xóa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, 0, 300, Short.MAX_VALUE))
                        .addGap(87, 87, 87))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jComboBox1.setSelectedItem(null);// Mã Sinh viên 
        jTextField1.setText(""); // Biển số xe
        jTextField2.setText(""); // Ngày đăng ký
        CurrentBienSo= "";
        jButton1.setText("Lưu");

    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean isValidDate(String dateStr) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false); // Đặt chế độ nghiêm ngặt
            try {
                sdf.parse(dateStr);
                return true;
            } catch (ParseException e) {
                return false;
            }
        }
//    private boolean kiemTraSoXeDangKy(String maSV) throws SQLException {
//    String query = "SELECT COUNT(*) FROM XeDangKy WHERE MaSV = ?";
//    try (Connection conn = MySqlConnect.getConnection();
//         PreparedStatement pstmt = conn.prepareStatement(query)) {
//        pstmt.setString(1, maSV);
//        ResultSet rs = pstmt.executeQuery();
//        if (rs.next() && rs.getInt(1) >= 2) {
//            JOptionPane.showMessageDialog(this, "Sinh viên đã đăng ký tối đa 2 xe.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//            return false;
//        }
//    }catch (Exception ex) {
//            System.out.println("Có lỗi xảy ra. Thêm mới không thành công!");
//            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Thêm mới không thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
//    }
//    return true;
//    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Lấy dữ liệu từ các JTextField
        String BienSo = jTextField1.getText();
        String NgayDangKy = jTextField2.getText();
        String MaSV;
        if (jComboBox1.getSelectedItem() != null) {
            MaSV = jComboBox1.getSelectedItem().toString();
        } else {
            MaSV = "";
        }
        boolean validateNgayDangKy = isValidDate(NgayDangKy);
        //boolean validateSoXeDangKy = kiemTraSoXeDangKy(MaSV);
        String sql;
        System.out.println(NgayDangKy);
        System.out.println(validateNgayDangKy);
        if (MaSV.isEmpty() || BienSo.isEmpty() || NgayDangKy.isEmpty()){
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }else if (validateNgayDangKy != true){
            JOptionPane.showMessageDialog(this, "Ngày đăng ký không hợp lệ. Vui lòng nhập theo định dạng yyyy-MM-dd", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        else if (!kiemTraSoXeDangKy(MaSV)){
//            JOptionPane.showMessageDialog(this, "Sinh viên đã đăng ký tối đa 2", "Lỗi", JOptionPane.ERROR_MESSAGE);
//            loadTableData();
//        }
        boolean isUpdating = !CurrentBienSo.isEmpty();
        System.out.print(isUpdating);
        if(isUpdating){
            // Câu lệnh UPDATE
            sql = "UPDATE XeDangKy SET MaSV ='" + MaSV + "', BienSo ='" + BienSo + "',  NgayDangKy ='" + NgayDangKy + "' WHERE BienSo = " + this.CurrentBienSo;
        } else {
            // Câu lệnh INSERT
            sql = "INSERT INTO XeDangKy (MaSV, BienSo, NgayDangKy) VALUES ('" + MaSV + "', '" + BienSo + "', '" + NgayDangKy + "')";
        }
        try {
            int rowsAffected = MySqlConnect.executeUpdate(sql);
            if (rowsAffected > 0) {
                jButton1.setText("Lưu");
                if (!isUpdating & validateNgayDangKy == true){
                    JOptionPane.showMessageDialog(null, "Thêm mới thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }else if(isUpdating & validateNgayDangKy == true){
                    JOptionPane.showMessageDialog(null, "Sửa thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
                this.CurrentBienSo = "";
            }

            // Sau khi lưu, hiển thị dữ liệu trong JTable
            loadTableData();
        } catch (SQLException ex) {
            // Kiểm tra mã lỗi
            if (ex.getErrorCode() == 10000) {
                JOptionPane.showMessageDialog(null,ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else {
                System.out.println(ex.getErrorCode());
                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Thêm mới không thành công!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception ex) {
            System.out.println("Có lỗi xảy ra. Thêm mới không thành công!");
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Thêm mới không thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadMaSVIntoComboBox(){
        String sqlcombobox1 = "SELECT MaSV FROM SinhVien";
        try {
            ResultSet Combobox1 = MySqlConnect.executeSQL(sqlcombobox1);
            while (Combobox1 != null & Combobox1.next()) {
                jComboBox1.addItem(Combobox1.getString("MaSV"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách mã sinh viên: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    }
    
    private void loadTableData() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Không cho phép chỉnh sửa bất kỳ ô nào
                return false;
            }
        };
        model.addColumn("Mã SV");
        model.addColumn("Biển Số");
        model.addColumn("Ngày Gửi Xe");
        model.addColumn("Sửa");
        model.addColumn("Xóa");

        // Thêm dữ liệu vào mô hình bảng
        String sqlSelect = "SELECT sv.MaSV, sv.SoCMT, sv.NgaySinh, sv.Lop, sv.SoPhong, sv.QueQuan , sv.NgayVaoO, xe.BienSo, xe.NgayDangKy FROM SinhVien sv JOIN XeDangKy xe ON sv.MaSV = xe.MaSV";
        try {
            ResultSet rsXe = MySqlConnect.executeSQL(sqlSelect);

            while (rsXe != null && rsXe.next()) {
                SinhVien sv = new SinhVien(
                        rsXe.getString("MaSV"),
                        rsXe.getString("SoCMT"),
                        rsXe.getString("NgaySinh"),
                        rsXe.getString("Lop"),
                        rsXe.getString("QueQuan"),
                        rsXe.getString("SoPhong"),
                        rsXe.getString("NgayVaoO")
                );
                Xe xe = new Xe(
                        rsXe.getString("BienSo"),
                        rsXe.getDate("NgayDangKy")
                );

                // Thêm hàng vào DefaultTableModel
                model.addRow(new Object[]{
                    sv.getMaSv(),
                    xe.getBienSo(),
                    xe.getNgayDangKy(),
                    "Sửa",
                    "Xóa"
                });
            }

            // Thiết lập model cho JTable
            jTable1.setModel(model);

            rsXe.close();
        } catch (SQLException ex) {
            System.out.println("Failed to retrieve data from the database.");
        }
    }
    private void setupTableListenersSV() {
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = jTable1.rowAtPoint(e.getPoint());
                int column = jTable1.columnAtPoint(e.getPoint());

                // Kiểm tra nếu nhấp vào một hàng
                if (row >= 0) {
                    // Kiểm tra nếu click vào cột "Sửa"
                    if (column == jTable1.getColumn("Sửa").getModelIndex()) {
                        // Cập nhật dữ liệu lên form
                        updateFormFromSelectedRow(row);
                    }
                    // Kiểm tra nếu click vào cột "Xóa"
                    else if (column == jTable1.getColumn("Xóa").getModelIndex()) {
                        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa dòng này?", "Xóa", JOptionPane.YES_NO_OPTION);
                        if (confirm == JOptionPane.YES_OPTION) {
                            String Bienso = jTable1.getValueAt(row, 1).toString();
                            deleteRow(Bienso);
                        }
                    }
                }
            }
        });
    }
    private void updateFormFromSelectedRow(int row) {
        if (row >= 0) {
            jComboBox1.setSelectedItem(jTable1.getValueAt(row, 0).toString());  // Mã SV
            jTextField1.setText(jTable1.getValueAt(row, 1).toString()); // Biển số xe
            jTextField2.setText(jTable1.getValueAt(row, 2).toString()); // Ngày Đăng Ký
            jButton1.setText("Sửa");
            CurrentBienSo = jTable1.getValueAt(row, 1).toString();
        }
    }
    
    private void deleteRow(String BienSo) {
        String sqlDelete = "DELETE FROM XeDangKy WHERE BienSo = ?";
        int rowsAffected = MySqlConnect.executeDelete(sqlDelete, BienSo);
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Xóa thành công", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Xóa không thành công", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        loadTableData();
    }
    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
